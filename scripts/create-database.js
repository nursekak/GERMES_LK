const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

class DatabaseCreator {
  constructor() {
    this.config = {
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 5432,
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || '',
      database: 'postgres' // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
    };
  }

  async createDatabase() {
    const client = new Client(this.config);
    
    try {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
      await client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      const dbName = process.env.DB_NAME || 'germes_lk';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      const checkDbQuery = `
        SELECT 1 FROM pg_database WHERE datname = $1
      `;
      const dbExists = await client.query(checkDbQuery, [dbName]);
      
      if (dbExists.rows.length > 0) {
        console.log(`‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${dbName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        
        const readline = require('readline');
        const rl = readline.createInterface({
          input: process.stdin,
          output: process.stdout
        });

        const answer = await new Promise((resolve) => {
          rl.question('–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): ', resolve);
        });
        
        rl.close();
        
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
          console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '${dbName}'...`);
          await client.query(`DROP DATABASE "${dbName}"`);
          console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
        } else {
          console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
          return;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ collation
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '${dbName}'...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ –∏ collation
      const templateInfo = await client.query(`
        SELECT datname, datcollate, datctype 
        FROM pg_database 
        WHERE datname = 'template1'
      `);
      
      if (templateInfo.rows.length > 0) {
        const { datcollate, datctype } = templateInfo.rows[0];
        console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º collation: ${datcollate}, ctype: ${datctype}`);
        
        await client.query(`
          CREATE DATABASE "${dbName}" 
          WITH 
          ENCODING = 'UTF8'
          LC_COLLATE = '${datcollate}'
          LC_CTYPE = '${datctype}'
          TEMPLATE = template0
        `);
      } else {
        // Fallback - —Å–æ–∑–¥–∞–µ–º —Å template0
        await client.query(`CREATE DATABASE "${dbName}" WITH TEMPLATE = template0`);
      }
      
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      if (process.env.DB_USER && process.env.DB_USER !== 'postgres') {
        const dbUser = process.env.DB_USER;
        const dbPassword = process.env.DB_PASSWORD;
        
        console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${dbUser}'...`);
        
        try {
          await client.query(`CREATE USER "${dbUser}" WITH PASSWORD '${dbPassword}'`);
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
        } catch (error) {
          if (error.message.includes('already exists')) {
            console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
          } else {
            throw error;
          }
        }
        
        // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
        console.log('üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
        await client.query(`GRANT ALL PRIVILEGES ON DATABASE "${dbName}" TO "${dbUser}"`);
        await client.query(`ALTER USER "${dbUser}" CREATEDB`);
        console.log('‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      }

      console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
      console.log(`üìä –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbName}`);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.config.user}`);
      console.log(`üåê –•–æ—Å—Ç: ${this.config.host}:${this.config.port}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      process.exit(1);
    } finally {
      await client.end();
    }
  }

  async testConnection() {
    const testConfig = {
      ...this.config,
      database: process.env.DB_NAME || 'germes_lk'
    };
    
    const client = new Client(testConfig);
    
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      await client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
      const versionResult = await client.query('SELECT version()');
      console.log(`üìã –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version.split(' ')[1]}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      process.exit(1);
    } finally {
      await client.end();
    }
  }

  async createTables() {
    const client = new Client({
      ...this.config,
      database: process.env.DB_NAME || 'germes_lk'
    });
    
    try {
      console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
      await client.connect();
      
      // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
      const createTablesSQL = `
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        CREATE TABLE IF NOT EXISTS users (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          email VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          first_name VARCHAR(50) NOT NULL,
          last_name VARCHAR(50) NOT NULL,
          role VARCHAR(20) NOT NULL DEFAULT 'employee' CHECK (role IN ('manager', 'employee')),
          is_active BOOLEAN DEFAULT true,
          last_login TIMESTAMP,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
        CREATE TABLE IF NOT EXISTS workplaces (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          name VARCHAR(100) NOT NULL,
          address TEXT NOT NULL,
          qr_code VARCHAR(255) UNIQUE NOT NULL,
          is_active BOOLEAN DEFAULT true,
          description TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
        CREATE TABLE IF NOT EXISTS attendance (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          workplace_id UUID NOT NULL REFERENCES workplaces(id) ON DELETE CASCADE,
          check_in_time TIMESTAMP NOT NULL,
          check_out_time TIMESTAMP,
          status VARCHAR(20) NOT NULL DEFAULT 'present' CHECK (status IN ('present', 'late', 'absent')),
          notes TEXT,
          ip_address VARCHAR(45),
          user_agent TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
        CREATE TABLE IF NOT EXISTS reports (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          title VARCHAR(200) NOT NULL,
          content TEXT NOT NULL,
          report_date DATE NOT NULL,
          status VARCHAR(20) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'submitted', 'approved', 'rejected')),
          approved_by UUID REFERENCES users(id) ON DELETE SET NULL,
          approved_at TIMESTAMP,
          comments TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        CREATE INDEX IF NOT EXISTS idx_attendance_user_id ON attendance(user_id);
        CREATE INDEX IF NOT EXISTS idx_attendance_workplace_id ON attendance(workplace_id);
        CREATE INDEX IF NOT EXISTS idx_attendance_check_in_time ON attendance(check_in_time);
        CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id);
        CREATE INDEX IF NOT EXISTS idx_reports_report_date ON reports(report_date);
        CREATE INDEX IF NOT EXISTS idx_reports_status ON reports(status);
        CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
        CREATE INDEX IF NOT EXISTS idx_workplaces_qr_code ON workplaces(qr_code);
        
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
        END;
        $$ language 'plpgsql';
        
        CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
        CREATE TRIGGER update_workplaces_updated_at BEFORE UPDATE ON workplaces
          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
        CREATE TRIGGER update_attendance_updated_at BEFORE UPDATE ON attendance
          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
        CREATE TRIGGER update_reports_updated_at BEFORE UPDATE ON reports
          FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
      `;
      
      await client.query(createTablesSQL);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      const bcrypt = require('bcryptjs');
      const { v4: uuidv4 } = require('uuid');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminPassword = await bcrypt.hash('admin123', 12);
      await client.query(`
        INSERT INTO users (id, email, password, first_name, last_name, role, is_active)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
        ON CONFLICT (email) DO NOTHING
      `, [uuidv4(), 'admin@germes.ru', adminPassword, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–°–∏—Å—Ç–µ–º—ã', 'manager', true]);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const employeePassword = await bcrypt.hash('employee123', 12);
      await client.query(`
        INSERT INTO users (id, email, password, first_name, last_name, role, is_active)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
        ON CONFLICT (email) DO NOTHING
      `, [uuidv4(), 'employee@germes.ru', employeePassword, '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤', 'employee', true]);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
      const qrCode = uuidv4();
      await client.query(`
        INSERT INTO workplaces (id, name, address, qr_code, description, is_active)
        VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT (qr_code) DO NOTHING
      `, [uuidv4(), '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1', qrCode, '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', true]);
      
      console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
      throw error;
    } finally {
      await client.end();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
async function interactiveCreate() {
  const creator = new DatabaseCreator();
  
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì–ï–†–ú–ï–° –õ–ö');
  console.log('=====================================\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
  if (!fs.existsSync('.env')) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example');
    console.log('   cp env.example .env');
    console.log('   –ó–∞—Ç–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n');
  }
  
  try {
    await creator.createDatabase();
    await creator.testConnection();
    await creator.createTables();
    
    console.log('\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000');
    console.log('\nüë§ –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@germes.ru / admin123');
    console.log('   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: employee@germes.ru / employee123');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  interactiveCreate();
}

module.exports = DatabaseCreator;
