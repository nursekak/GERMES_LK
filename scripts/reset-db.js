const { Client } = require('pg');
require('dotenv').config();

async function resetDatabase() {
  const config = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'germes_lk'
  };

  const client = new Client(config);
  
  try {
    console.log('üóëÔ∏è  –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await client.connect();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    const tables = ['reports', 'attendance', 'workplaces', 'users'];
    
    for (const table of tables) {
      try {
        await client.query(`DROP TABLE IF EXISTS "${table}" CASCADE`);
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —É–¥–∞–ª–µ–Ω–∞`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞`);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Ç–∏–ø—ã ENUM, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const enumTypes = ['enum_users_role', 'enum_attendance_status', 'enum_reports_status'];
    
    for (const enumType of enumTypes) {
      try {
        await client.query(`DROP TYPE IF EXISTS "${enumType}" CASCADE`);
        console.log(`‚úÖ –¢–∏–ø ${enumType} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –¢–∏–ø ${enumType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞');
    console.log('–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

resetDatabase();

