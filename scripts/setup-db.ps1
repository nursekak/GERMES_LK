# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è –ì–ï–†–ú–ï–° –õ–ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\setup-db.ps1

param(
    [switch]$Force
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã
function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

Write-ColorOutput "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì–ï–†–ú–ï–° –õ–ö" "Blue"
Write-ColorOutput "=====================================" "Blue"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL
if (-not (Test-Command "psql")) {
    Write-ColorOutput "‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Red"
    Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞: https://www.postgresql.org/download/" "Yellow"
    Write-ColorOutput "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chocolatey: choco install postgresql" "Yellow"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if (-not (Test-Path ".env")) {
    Write-ColorOutput "‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω" "Yellow"
    Write-ColorOutput "–°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞..." "Blue"
    Copy-Item "env.example" ".env"
    Write-ColorOutput "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ PostgreSQL" "Yellow"
    Write-ColorOutput "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." "Yellow"
    Read-Host
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
$envContent = Get-Content ".env" | Where-Object { $_ -match "^[^#]" -and $_ -match "=" }
foreach ($line in $envContent) {
    $parts = $line -split "=", 2
    if ($parts.Length -eq 2) {
        [Environment]::SetEnvironmentVariable($parts[0], $parts[1], "Process")
    }
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
$DB_HOST = if ($env:DB_HOST) { $env:DB_HOST } else { "localhost" }
$DB_PORT = if ($env:DB_PORT) { $env:DB_PORT } else { "5432" }
$DB_NAME = if ($env:DB_NAME) { $env:DB_NAME } else { "germes_lk" }
$DB_USER = if ($env:DB_USER) { $env:DB_USER } else { "postgres" }
$DB_PASSWORD = if ($env:DB_PASSWORD) { $env:DB_PASSWORD } else { "" }

Write-ColorOutput "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:" "Blue"
Write-ColorOutput "  –•–æ—Å—Ç: $DB_HOST" "White"
Write-ColorOutput "  –ü–æ—Ä—Ç: $DB_PORT" "White"
Write-ColorOutput "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_NAME" "White"
Write-ColorOutput "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DB_USER" "White"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..." "Blue"
$env:PGPASSWORD = $DB_PASSWORD
$testConnection = & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "\q" 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL" "Red"
    Write-ColorOutput "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ" "Yellow"
    exit 1
}

Write-ColorOutput "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ" "Green"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." "Blue"
$checkDb = & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" 2>$null
if ($checkDb -match "1 row") {
    Write-ColorOutput "‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '$DB_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "Yellow"
    if (-not $Force) {
        $answer = Read-Host "–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N)"
        if ($answer -notmatch "^[Yy]$") {
            Write-ColorOutput "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" "Red"
            exit 0
        }
    }
    Write-ColorOutput "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." "Blue"
    & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "DROP DATABASE IF EXISTS `"$DB_NAME`""
    Write-ColorOutput "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞" "Green"
}

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å template0 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å collation
Write-ColorOutput "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '$DB_NAME'..." "Blue"

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ collation –∏–∑ template1
$collationInfo = & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -t -c "SELECT datcollate, datctype FROM pg_database WHERE datname = 'template1';" 2>$null

if ($collationInfo -and $collationInfo.Trim() -ne "") {
    # –ò–∑–≤–ª–µ–∫–∞–µ–º collation –∏ ctype
    $parts = $collationInfo.Trim() -split '\s+'
    $collate = $parts[0]
    $ctype = $parts[1]
    
    Write-ColorOutput "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º collation: $collate, ctype: $ctype" "Blue"
    
    $createDbSQL = @"
CREATE DATABASE `"$DB_NAME`" 
WITH 
ENCODING = 'UTF8'
LC_COLLATE = '$collate'
LC_CTYPE = '$ctype'
TEMPLATE = template0
"@
    
    $createDbSQL | & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres
} else {
    # Fallback - —Å–æ–∑–¥–∞–µ–º —Å template0
    Write-ColorOutput "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ collation, –∏—Å–ø–æ–ª—å–∑—É–µ–º template0" "Yellow"
    & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "CREATE DATABASE `"$DB_NAME`" WITH TEMPLATE = template0"
}

if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞" "Green"

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ postgres)
if ($DB_USER -ne "postgres") {
    Write-ColorOutput "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$DB_USER'..." "Blue"
    & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "CREATE USER `"$DB_USER`" WITH PASSWORD '$DB_PASSWORD'" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω" "Green"
    } else {
        Write-ColorOutput "‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "Yellow"
    }
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
    Write-ColorOutput "üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..." "Blue"
    & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE `"$DB_NAME`" TO `"$DB_USER`""
    & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "ALTER USER `"$DB_USER`" CREATEDB"
    Write-ColorOutput "‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã" "Green"
}

# –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ç–∞–±–ª–∏—Ü—ã
Write-ColorOutput "üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü..." "Blue"
$createTablesSQL = @"
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  role VARCHAR(20) NOT NULL DEFAULT 'employee' CHECK (role IN ('manager', 'employee')),
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
CREATE TABLE IF NOT EXISTS workplaces (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL,
  address TEXT NOT NULL,
  qr_code VARCHAR(255) UNIQUE NOT NULL,
  is_active BOOLEAN DEFAULT true,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS attendance (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  workplace_id UUID NOT NULL REFERENCES workplaces(id) ON DELETE CASCADE,
  check_in_time TIMESTAMP NOT NULL,
  check_out_time TIMESTAMP,
  status VARCHAR(20) NOT NULL DEFAULT 'present' CHECK (status IN ('present', 'late', 'absent')),
  notes TEXT,
  ip_address VARCHAR(45),
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
CREATE TABLE IF NOT EXISTS reports (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(200) NOT NULL,
  content TEXT NOT NULL,
  report_date DATE NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'submitted', 'approved', 'rejected')),
  approved_by UUID REFERENCES users(id) ON DELETE SET NULL,
  approved_at TIMESTAMP,
  comments TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted_at TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_attendance_user_id ON attendance(user_id);
CREATE INDEX IF NOT EXISTS idx_attendance_workplace_id ON attendance(workplace_id);
CREATE INDEX IF NOT EXISTS idx_attendance_check_in_time ON attendance(check_in_time);
CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id);
CREATE INDEX IF NOT EXISTS idx_reports_report_date ON reports(report_date);
CREATE INDEX IF NOT EXISTS idx_reports_status ON reports(status);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_workplaces_qr_code ON workplaces(qr_code);
"@

$createTablesSQL | & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME
if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã" "Green"

# –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
Write-ColorOutput "üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..." "Blue"
$initDataSQL = @"
-- –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–∞—Ä–æ–ª—å: admin123)
INSERT INTO users (email, password, first_name, last_name, role, is_active)
VALUES ('admin@germes.ru', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8.5.2', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–°–∏—Å—Ç–µ–º—ã', 'manager', true)
ON CONFLICT (email) DO NOTHING;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ø–∞—Ä–æ–ª—å: employee123)
INSERT INTO users (email, password, first_name, last_name, role, is_active)
VALUES ('employee@germes.ru', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8.5.2', '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤', 'employee', true)
ON CONFLICT (email) DO NOTHING;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
INSERT INTO workplaces (name, address, qr_code, description, is_active)
VALUES ('–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1', uuid_generate_v4()::text, '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', true)
ON CONFLICT (qr_code) DO NOTHING;
"@

$initDataSQL | & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME
if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã" "Green"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
Write-ColorOutput "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..." "Blue"
$testResult = & psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT COUNT(*) FROM users;" 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-ColorOutput "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ" "Green"
} else {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" "Red"
    exit 1
}

Write-ColorOutput "" "White"
Write-ColorOutput "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Green"
Write-ColorOutput "" "White"
Write-ColorOutput "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" "Blue"
Write-ColorOutput "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install" "White"
Write-ColorOutput "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev" "White"
Write-ColorOutput "3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000" "White"
Write-ColorOutput "" "White"
Write-ColorOutput "üë§ –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:" "Blue"
Write-ColorOutput "   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@germes.ru / admin123" "White"
Write-ColorOutput "   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: employee@germes.ru / employee123" "White"
Write-ColorOutput "" "White"
Write-ColorOutput "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:" "Blue"
Write-ColorOutput "   –ò–º—è: $DB_NAME" "White"
Write-ColorOutput "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DB_USER" "White"
Write-ColorOutput "   –•–æ—Å—Ç: $DB_HOST`:$DB_PORT" "White"
