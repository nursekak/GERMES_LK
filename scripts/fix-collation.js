const { Client } = require('pg');
require('dotenv').config();

class CollationFixer {
  constructor() {
    this.config = {
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 5432,
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || '',
      database: 'postgres'
    };
  }

  async diagnoseCollationIssues() {
    const client = new Client(this.config);
    
    try {
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å collation...');
      await client.connect();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
      const versionResult = await client.query('SELECT version()');
      console.log(`üìã –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version.split(' ')[1]}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ collation
      const collationResult = await client.query(`
        SELECT datname, datcollate, datctype, datcollversion
        FROM pg_database 
        WHERE datname IN ('template0', 'template1', 'postgres')
        ORDER BY datname
      `);

      console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ collation –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞–∑–∞—Ö:');
      console.log('='.repeat(80));
      collationResult.rows.forEach(row => {
        console.log(`–ë–∞–∑–∞: ${row.datname}`);
        console.log(`  Collate: ${row.datcollate}`);
        console.log(`  Ctype: ${row.datctype}`);
        console.log(`  Version: ${row.datcollversion || 'N/A'}`);
        console.log('');
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–∞–∑—ã
      const userDbsResult = await client.query(`
        SELECT datname, datcollate, datctype, datcollversion
        FROM pg_database 
        WHERE datname NOT IN ('template0', 'template1', 'postgres')
        ORDER BY datname
      `);

      if (userDbsResult.rows.length > 0) {
        console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
        console.log('='.repeat(80));
        userDbsResult.rows.forEach(row => {
          console.log(`–ë–∞–∑–∞: ${row.datname}`);
          console.log(`  Collate: ${row.datcollate}`);
          console.log(`  Ctype: ${row.datctype}`);
          console.log(`  Version: ${row.datcollversion || 'N/A'}`);
          console.log('');
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å collation
      const template0 = collationResult.rows.find(r => r.datname === 'template0');
      const template1 = collationResult.rows.find(r => r.datname === 'template1');

      if (template0 && template1) {
        if (template0.datcollate !== template1.datcollate || 
            template0.datctype !== template1.datctype) {
          console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ collation –º–µ–∂–¥—É template0 –∏ template1');
          console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö');
        } else {
          console.log('‚úÖ Collation –≤ template0 –∏ template1 —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
      throw error;
    } finally {
      await client.end();
    }
  }

  async fixCollationIssues() {
    const client = new Client(this.config);
    
    try {
      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å collation...');
      await client.connect();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ template0
      const template0Info = await client.query(`
        SELECT datcollate, datctype 
        FROM pg_database 
        WHERE datname = 'template0'
      `);

      if (template0Info.rows.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ template0');
      }

      const { datcollate, datctype } = template0Info.rows[0];
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º collation –∏–∑ template0: ${datcollate}, ctype: ${datctype}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      const dbName = process.env.DB_NAME || 'germes_lk';
      const dbExists = await client.query(`
        SELECT 1 FROM pg_database WHERE datname = $1
      `, [dbName]);

      if (dbExists.rows.length > 0) {
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '${dbName}'...`);
        await client.query(`DROP DATABASE "${dbName}"`);
      }

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '${dbName}' —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...`);
      await client.query(`
        CREATE DATABASE "${dbName}" 
        WITH 
        ENCODING = 'UTF8'
        LC_COLLATE = '${datcollate}'
        LC_CTYPE = '${datctype}'
        TEMPLATE = template0
      `);

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ
      const testClient = new Client({
        ...this.config,
        database: dbName
      });

      await testClient.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      await testClient.end();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
      throw error;
    } finally {
      await client.end();
    }
  }

  async createTablesWithCollation() {
    const client = new Client({
      ...this.config,
      database: process.env.DB_NAME || 'germes_lk'
    });
    
    try {
      console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...');
      await client.connect();

      // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º collation
      const createTablesSQL = `
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        CREATE TABLE IF NOT EXISTS users (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          email VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          first_name VARCHAR(50) NOT NULL,
          last_name VARCHAR(50) NOT NULL,
          role VARCHAR(20) NOT NULL DEFAULT 'employee' CHECK (role IN ('manager', 'employee')),
          is_active BOOLEAN DEFAULT true,
          last_login TIMESTAMP,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
        CREATE TABLE IF NOT EXISTS workplaces (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          name VARCHAR(100) NOT NULL,
          address TEXT NOT NULL,
          qr_code VARCHAR(255) UNIQUE NOT NULL,
          is_active BOOLEAN DEFAULT true,
          description TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
        CREATE TABLE IF NOT EXISTS attendance (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          workplace_id UUID NOT NULL REFERENCES workplaces(id) ON DELETE CASCADE,
          check_in_time TIMESTAMP NOT NULL,
          check_out_time TIMESTAMP,
          status VARCHAR(20) NOT NULL DEFAULT 'present' CHECK (status IN ('present', 'late', 'absent')),
          notes TEXT,
          ip_address VARCHAR(45),
          user_agent TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
        CREATE TABLE IF NOT EXISTS reports (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          title VARCHAR(200) NOT NULL,
          content TEXT NOT NULL,
          report_date DATE NOT NULL,
          status VARCHAR(20) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'submitted', 'approved', 'rejected')),
          approved_by UUID REFERENCES users(id) ON DELETE SET NULL,
          approved_at TIMESTAMP,
          comments TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          deleted_at TIMESTAMP
        );
        
        -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        CREATE INDEX IF NOT EXISTS idx_attendance_user_id ON attendance(user_id);
        CREATE INDEX IF NOT EXISTS idx_attendance_workplace_id ON attendance(workplace_id);
        CREATE INDEX IF NOT EXISTS idx_attendance_check_in_time ON attendance(check_in_time);
        CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id);
        CREATE INDEX IF NOT EXISTS idx_reports_report_date ON reports(report_date);
        CREATE INDEX IF NOT EXISTS idx_reports_status ON reports(status);
        CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
        CREATE INDEX IF NOT EXISTS idx_workplaces_qr_code ON workplaces(qr_code);
      `;
      
      await client.query(createTablesSQL);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
      throw error;
    } finally {
      await client.end();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function interactiveFix() {
  const fixer = new CollationFixer();
  
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å collation –¥–ª—è –ì–ï–†–ú–ï–° –õ–ö');
  console.log('===============================================\n');
  
  try {
    await fixer.diagnoseCollationIssues();
    
    console.log('\n' + '='.repeat(80));
    console.log('–•–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å collation? (y/N)');
    
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const answer = await new Promise((resolve) => {
      rl.question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? ', resolve);
    });
    
    rl.close();
    
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      await fixer.fixCollationIssues();
      await fixer.createTablesWithCollation();
      
      console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run init-db');
    } else {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  interactiveFix();
}

module.exports = CollationFixer;



